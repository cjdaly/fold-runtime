<!--
 - Copyright (c) 2015 Chris J Daly (github user cjdaly)
 - All rights reserved. This program and the accompanying materials
 - are made available under the terms of the Eclipse Public License v1.0
 - which accompanies this distribution, and is available at
 - http://www.eclipse.org/legal/epl-v10.html
 -
 - Contributors:
 -   cjdaly - initial API and implementation
-->
<project name="fold-setup" default="main">
	<property file="./eclipse/configuration/config.ini" prefix="eclipse-config" />

	<property name="fold-runtime-dir" value="${basedir}" />
	<property name="fold-data-dirname" value="data" />
	<property name="fold-data-dir" value="${fold-runtime-dir}/${fold-data-dirname}" />
	<property name="fold-extend-plugins-dir" value="${fold-runtime-dir}/extend/plugins" />
	<property name="neo4j-download-version" value="${eclipse-config.net.locosoft.fold.neo4j.version}" />
	<property name="neo4j-database.location" value="../../${fold-data-dirname}/neo4j/graph.db" />

	<target name="clean" depends="neo4j-setup-init">
		<delete dir="${neo4j-extract-dir}" />
	</target>

	<target name="main" depends="neo4j-setup,ready-check">
	</target>

	<target name="ready-check" depends="ready-check-open-files-limit">
	</target>

	<target name="ready-check-open-files-limit">
		<echo>Checking /etc/security/limits.conf for user: ${user.name}</echo>

		<exec executable="grep" dir="/etc/security" resultproperty="check-open-files-limit-hard">
			<arg value="^${user.name} hard nofile 40000" />
			<arg value="limits.conf" />
		</exec>
		<echo>Checking for '${user.name} hard nofile 40000' (0=PASS) result: ${check-open-files-limit-hard}</echo>

		<exec executable="grep" dir="/etc/security" resultproperty="check-open-files-limit-soft">
			<arg value="^${user.name} soft nofile 40000" />
			<arg value="limits.conf" />
		</exec>
		<echo>Checking for '${user.name} soft nofile 40000' (0=PASS) result: ${check-open-files-limit-soft}</echo>

		<condition property="check-open-files-limits-PASS">
			<and>
				<equals arg1="${check-open-files-limit-hard}" arg2="0" />
				<equals arg1="${check-open-files-limit-soft}" arg2="0" />
			</and>
		</condition>

		<fail unless="check-open-files-limits-PASS">Missing configuration settings!

Action: Add the following lines to /etc/security/limits.conf:

${user.name} hard nofile 40000
${user.name} soft nofile 40000
		</fail>
	</target>

	<target name="neo4j-setup" depends="
		neo4j-setup-init,
		neo4j-download,
		neo4j-extract,
		neo4j-config">
	</target>

	<target name="neo4j-setup-init">
		<property name="neo4j-dir" value="${fold-runtime-dir}/neo4j" />
		<property name="neo4j-download-dir" value="${neo4j-dir}/downloads" />
		<property name="neo4j-extract-dirname" value="neo4j-community-${neo4j-download-version}" />
		<property name="neo4j-extract-dir" value="${neo4j-dir}/${neo4j-extract-dirname}" />
		<property name="neo4j-download-filename" value="${neo4j-extract-dirname}-unix.tar.gz" />
		<property name="neo4j-download-file" value="${neo4j-download-dir}/${neo4j-download-filename}" />
		<property name="neo4j-download-url" value="http://neo4j.com/artifact.php?name=${neo4j-download-filename}" />
		<property name="neo4j-conf-dir" value="${neo4j-extract-dir}/conf" />

		<available property="neo4j-download-available" file="${neo4j-download-file}" />
		<available property="neo4j-extract-available" file="${neo4j-extract-dir}" type="dir" />
	</target>

	<target name="neo4j-download" unless="neo4j-download-available">
		<mkdir dir="${neo4j-download-dir}" />
		<get src="${neo4j-download-url}" dest="${neo4j-download-file}" />
	</target>

	<target name="neo4j-extract" unless="neo4j-extract-available">
		<exec executable="tar" dir="${neo4j-dir}">
			<arg value="xvf" />
			<arg value="${neo4j-download-file}" />
		</exec>
		<fail>
			<condition>
				<not>
					<available file="${neo4j-extract-dir}" type="dir" />
				</not>
			</condition>
		</fail>
	</target>

	<target name="neo4j-config">

		<replace-property file="${neo4j-conf-dir}/neo4j-server.properties" name="org.neo4j.server.database.location" value="${neo4j-database.location}" />

		<replace-property file="${neo4j-conf-dir}/neo4j-server.properties" name="dbms.security.auth_enabled" value="false" />

	</target>

	<macrodef name="replace-property">
		<attribute name="file" />
		<attribute name="name" />
		<attribute name="value" />
		<sequential>
			<echo>Replacing in file @{file}:</echo>
			<echo>  @{name}=@{value}</echo>
			<replaceregexp file="@{file}" byline="true">
				<regexp pattern="(@{name})=(.*)" />
				<substitution expression="\1=@{value}" />
			</replaceregexp>
		</sequential>
	</macrodef>

	<target name="reconcile-extensions">
		<mkdir dir="${fold-extend-plugins-dir}" />
		<delete file="${fold-extend-plugins-dir}/bundles.info" />
		<delete file="${fold-extend-plugins-dir}/bundles.info.fragment" />

		<fileset id="fold-extend-plugins.id" dir="${fold-extend-plugins-dir}" includes="*.jar" />
		<pathconvert property="fold-extend-plugins" refid="fold-extend-plugins.id" pathsep="${line.separator}">
			<map from="${fold-extend-plugins-dir}/" to="" />
		</pathconvert>
		<concat destfile="${fold-extend-plugins-dir}/bundles.info.fragment">${fold-extend-plugins}${line.separator}</concat>

		<replaceregexp file="${fold-extend-plugins-dir}/bundles.info.fragment" byline="true">
			<regexp pattern="([^_]+)_(.*).jar" />
			<substitution expression="\1,\2,../extend/plugins/\1_\2.jar,4,false" />
		</replaceregexp>

		<copy file="${fold-runtime-dir}/eclipse/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info" todir="${fold-extend-plugins-dir}" />
		<concat append="true" destfile="${fold-extend-plugins-dir}/bundles.info">
			<fileset file="${fold-extend-plugins-dir}/bundles.info.fragment" />
		</concat>

		<echo>Configured extension plugins:${line.separator}${fold-extend-plugins}</echo>
	</target>

</project>
